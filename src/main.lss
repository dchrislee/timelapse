
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000009e  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  00000130  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000369  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016b  00000000  00000000  00000501  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a1  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000810  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001de  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a2  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ee e9       	ldi	r30, 0x9E	; 158
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	aa 36       	cpi	r26, 0x6A	; 106
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>
  32:	19 d0       	rcall	.+50     	; 0x66 <main>
  34:	32 c0       	rjmp	.+100    	; 0x9a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z5shifth>:
    SETUP_DIGIT((1 << _HA) | (1 << _HB) | (1 << _HC)),								// 7
    SETUP_DIGIT((1 << _HA) | (1 << _HF) | (1 << _HG) | (1 << _HC) | (1 << _HD) | (1 << _HE) | (1 << _HB)),	// 8
    SETUP_DIGIT((1 << _HA) | (1 << _HF) | (1 << _HG) | (1 << _HC) | (1 << _HD) | (1 << _HB)),			// 9
}; 

void shift(uint8_t data) {
  38:	27 e0       	ldi	r18, 0x07	; 7
  3a:	30 e0       	ldi	r19, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++) {
	if (0 == (data & _BV(7 - i))) {
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	ac 01       	movw	r20, r24
  40:	02 2e       	mov	r0, r18
  42:	02 c0       	rjmp	.+4      	; 0x48 <__SREG__+0x9>
  44:	55 95       	asr	r21
  46:	47 95       	ror	r20
  48:	0a 94       	dec	r0
  4a:	e2 f7       	brpl	.-8      	; 0x44 <__SREG__+0x5>
  4c:	40 fd       	sbrc	r20, 0
  4e:	02 c0       	rjmp	.+4      	; 0x54 <__SREG__+0x15>
	    PORTB &= ~(1 << SR595_SER_DATA);
  50:	c0 98       	cbi	0x18, 0	; 24
  52:	01 c0       	rjmp	.+2      	; 0x56 <__SREG__+0x17>
	} else {
	    PORTB |= (1 << SR595_SER_DATA);
  54:	c0 9a       	sbi	0x18, 0	; 24
	}
	PORTB &= ~(1 << SR595_SRCLK_CLOCK);
  56:	c2 98       	cbi	0x18, 2	; 24
	PORTB |= (1 << SR595_SRCLK_CLOCK); 
  58:	c2 9a       	sbi	0x18, 2	; 24
  5a:	21 50       	subi	r18, 0x01	; 1
  5c:	31 09       	sbc	r19, r1
  5e:	78 f7       	brcc	.-34     	; 0x3e <__SP_L__+0x1>
    }
    PORTB &= ~(1 << SR595_RCLK_LATCH);
  60:	c1 98       	cbi	0x18, 1	; 24
    PORTB |= (1 << SR595_RCLK_LATCH); 
  62:	c1 9a       	sbi	0x18, 1	; 24
  64:	08 95       	ret

00000066 <main>:
}

int main() {
    DDRB = 0xFF;
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
  6a:	18 ba       	out	0x18, r1	; 24
	for(uint8_t i = 0; i < sizeof(_digits)/sizeof(uint8_t);i++) {
	    shift(_digits[i] + dot);
	    _delay_ms(1000);
	}
	if (dot > 0) {
	    dot = 0;
  6c:	10 e0       	ldi	r17, 0x00	; 0
  6e:	c0 e6       	ldi	r28, 0x60	; 96
  70:	d0 e0       	ldi	r29, 0x00	; 0
    DDRB = 0xFF;
    PORTB = 0x00;
    uint8_t dot = 0;
    while (1) {
	for(uint8_t i = 0; i < sizeof(_digits)/sizeof(uint8_t);i++) {
	    shift(_digits[i] + dot);
  72:	89 91       	ld	r24, Y+
  74:	81 0f       	add	r24, r17
  76:	e0 df       	rcall	.-64     	; 0x38 <_Z5shifth>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	2f e3       	ldi	r18, 0x3F	; 63
  7a:	8d e0       	ldi	r24, 0x0D	; 13
  7c:	93 e0       	ldi	r25, 0x03	; 3
  7e:	21 50       	subi	r18, 0x01	; 1
  80:	80 40       	sbci	r24, 0x00	; 0
  82:	90 40       	sbci	r25, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <main+0x18>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x22>
  88:	00 00       	nop
int main() {
    DDRB = 0xFF;
    PORTB = 0x00;
    uint8_t dot = 0;
    while (1) {
	for(uint8_t i = 0; i < sizeof(_digits)/sizeof(uint8_t);i++) {
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	ca 36       	cpi	r28, 0x6A	; 106
  8e:	d2 07       	cpc	r29, r18
  90:	81 f7       	brne	.-32     	; 0x72 <main+0xc>
	    shift(_digits[i] + dot);
	    _delay_ms(1000);
	}
	if (dot > 0) {
  92:	11 11       	cpse	r17, r1
  94:	eb cf       	rjmp	.-42     	; 0x6c <main+0x6>
	    dot = 0;
	} else {
	    dot = (1 << _HH);
  96:	10 e8       	ldi	r17, 0x80	; 128
  98:	ea cf       	rjmp	.-44     	; 0x6e <main+0x8>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
